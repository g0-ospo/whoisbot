# WhoisBot CI/CD Workflow
# 
# This workflow handles continuous integration and deployment for WhoisBot:
# 1. Security Analysis: CodeQL scanning for vulnerabilities
# 2. Validation: Running tests and checks
# 3. Publishing: Building and releasing new versions
# 
# Triggers:
# - On push to main branch
# - On pull requests to main branch
# - Weekly on Monday at 21:15 UTC
name: "Continuous Integration"

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  analyze:
    # CodeQL Security Analysis
    # Performs automated code scanning to identify vulnerabilities
    # - Excludes dist/ directory from analysis
    # - Runs on ubuntu-latest for most languages
    name: Analyze (${{ matrix.language }})
    # Runner size impacts CodeQL analysis time. To learn more, please see:
    #   - https://gh.io/recommended-hardware-resources-for-running-codeql
    #   - https://gh.io/supported-runners-and-hardware-resources
    #   - https://gh.io/using-larger-runners (GitHub.com only)
    # Consider using larger runners or machines with greater resources for possible analysis time improvements.
    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
    permissions:
      # required for all workflows
      security-events: write

      # required to fetch internal or private CodeQL packs
      packages: read

      # only required for workflows in private repositories
      actions: read
      contents: write

    strategy:
      fail-fast: false
      matrix:
        include:
        - language: javascript-typescript
          build-mode: none
        # CodeQL supports the following values keywords for 'language': 'c-cpp', 'csharp', 'go', 'java-kotlin', 'javascript-typescript', 'python', 'ruby', 'swift'
        # Use `c-cpp` to analyze code written in C, C++ or both
        # Use 'java-kotlin' to analyze code written in Java, Kotlin or both
        # Use 'javascript-typescript' to analyze code written in JavaScript, TypeScript or both
        # To learn more about changing the languages that are analyzed or customizing the build mode for your analysis,
        # see https://docs.github.com/en/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/customizing-your-advanced-setup-for-code-scanning.
        # If you are analyzing a compiled language, you can modify the 'build-mode' for that language to customize how
        # your codebase is analyzed, see https://docs.github.com/en/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/codeql-code-scanning-for-compiled-languages
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        build-mode: ${{ matrix.build-mode }}
        paths-ignore: |
          dist/** # Exclude the dist folder from CodeQL analysis
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with "+" to use these queries and those in the config file.

        # For more details on CodeQL's query packs, refer to: https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
        # queries: security-extended,security-and-quality

    # If the analyze step fails for one of the languages you are analyzing with
    # "We were unable to automatically build your code", modify the matrix above
    # to set the build mode to "manual" for that language. Then modify this step
    # to build your code.
    # ‚ÑπÔ∏è Command-line programs to run using the OS shell.
    # üìö See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun
    - if: matrix.build-mode == 'manual'
      shell: bash
      run: |
        echo 'If you are using a "manual" build mode for one or more of the' \
          'languages you are analyzing, replace this with the commands to build' \
          'your code, for example:'
        echo '  make bootstrap'
        echo '  make release'
        exit 1

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"

  validate:
    # Test Suite Validation
    # Runs the test suite to ensure code quality
    # - Installs dependencies
    # - Executes test suite in CI mode
    name: Validate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: npm install

      - name: Run Tests
        run: npm run test-ci

  release-branch:
    name: Prepare Release Branch
    needs: validate
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install dependencies
        run: npm install

      - name: Build Project
        run: npm run build

      - name: Create and Push Release Branch
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          RELEASE_BRANCH="release-$(date +%Y%m%d%H%M%S)"
          git checkout -b "$RELEASE_BRANCH"
          echo "::set-output name=RELEASE_BRANCH::$RELEASE_BRANCH"
          if [[ -n "$(git status --porcelain dist/)" ]]; then
            git add dist/
            git commit -m "Update dist folder for release"
            git push origin "$RELEASE_BRANCH"
          else
            echo "No changes in dist folder"
          fi

      - name: Open Pull Request
        uses: peter-evans/create-pull-request@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          base: main
          head: ${{ steps.create_and_push_release_branch.outputs.RELEASE_BRANCH }}
          title: "Release Candidate"
          body: "Automated release candidate pull request"

  publish:
    # Release Publishing
    # Handles building and publishing new versions
    # - Only runs on main branch
    # - Builds distribution bundle
    # - Commits dist/ changes if any
    # - Creates version tags
    # - Requires successful analyze and validate jobs
    name: Publish
    needs: [analyze, validate]
    if: github.ref == 'refs/heads/main' # Only run on main branch
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for all branches and tags

      - name: Install dependencies
        run: npm install

      - name: Build Project
        run: npm run build

      - name: "Publish (Placeholder for future release logic)"
        run: echo "Version bump and tagging now happen in a separate release workflow."